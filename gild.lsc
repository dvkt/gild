# gild is a command line gopher client written in LDPL, a language
# for programmers. The client is very simple and very hacky.
#
## TODO
# [x] Connect to server and print response (bad: depends on nc)
# [x] Display dir contents in technicolor
# [ ] Pipe file contents to less
# [ ] Prompt-based navigation (show link #s and ask what to do)
# [ ] Search
# [ ] Download file to pwd 
# [ ] Are we missing anything?

DATA:

# gopher config
gopher.host is text
gopher.port is text
gopher.selector is text
gopher.response is text

# page navigation
gopher.links is text vector

# generic locals
index is number
input is number
command is text
line is text
char is text
i is number
len is number
buf is text
tabs is number
type is text

colormap is text vector
linktypes is number vector

link-num is number

PROCEDURE:
store "\e[32m" in colormap:"0" # file
store "\e[34m" in colormap:"1" # dir
store "\e[33m" in colormap:"i" # info
store "\e[31m" in colormap:"3" # err
store "\e[36m" in colormap:"h" # html
store "\e[37m" in colormap:0   # nada
store "\e[35m" in colormap:"L" # link

store 1 in linktypes:"0" # file
store 1 in linktypes:"1" # dir

sub-procedure gopher-print
    store 0 in index
    store "" in char
    store "" in line
    store "" in buf
    store 0 in link-num

    get character at index from gopher.response in char
    while char is not equal to "" do 
        if char is equal to "\r" then
            add 1 and index in index
            get character at index from gopher.response in char
            if char is equal to "\n" then
                get character at 0 from line in char  
                if linktypes:char is equal to 1 then 
                    display colormap:"L" "   "
                    add 1 and link-num in link-num
                    if link-num is less than 10 then 
                        display "0" link-num 
                    else 
                        display link-num 
                    end if 
                    display ". "
                    store line in gopher.links:link-num
                else
                    display "       "
                end if 
                store colormap:char in char 
                if char is equal to "" then 
                    store colormap:0 in char 
                end if
                display char
                store 1 in i 
                store length of line in len
                store "" in buf
                while i is less than len do 
                    get character at i from line in char
                    if char is equal to "\t" then 
                        break
                    end if
                    join buf and char in buf
                    add 1 and i in i
                repeat
                display buf crlf
                store "" in line
            end if
        else
            join line and char in line
        end if
        add 1 and index in index
        get character at index from gopher.response in char
    repeat
end sub-procedure

sub-procedure gopher-get
    if gopher.selector is equal to "" then
        store "echo \"\r\" | nc " in command
    else
        join "echo \"" and gopher.selector in command
        join command and "\r\" | nc " in command
    end if
    join command and gopher.host in command
    join command and " " in command
    join command and gopher.port in command
    execute command and store output in gopher.response
end sub-procedure

sub-procedure gopher-parse-link
    store 1 in i 
    store 0 in tabs
    store "" in buf 
    store length of gopher.links:input in len
    get character at 0 from gopher.links:input in type
    
    while i is less than len do 
        get character at i from gopher.links:input in char
        add 1 and i in i
        if char is equal to "\t" then
            add 1 and tabs in tabs
            if tabs is equal to 2 then 
                store buf in gopher.selector
            end if 
            if tabs is equal to 3 then 
                store buf in gopher.host
            end if 
            store "" in buf 
        else 
            join buf and char in buf 
        end if 
    repeat 

    store buf in gopher.port
end sub-procedure

sub-procedure gopher-prompt
    display "Enter #: "
    accept input
    display gopher.links:input crlf
    call sub-procedure gopher-parse-link
end sub-procedure

# main
if argc is equal to 0 then
    display "Usage: gild hostname [port] [selector]" crlf
    exit
end if

store argv:0 in gopher.host
store argv:1 in gopher.port
store argv:2 in gopher.selector

if argv:1 is equal to "" then
    store "70" in gopher.port
end if

while 1 is greater than 0 do
    call sub-procedure gopher-get
    call sub-procedure gopher-print
    call sub-procedure gopher-prompt
repeat
